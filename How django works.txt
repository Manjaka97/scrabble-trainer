This is for my own reference so I understand how components interact.

What we learned using django for the first time
Django is a framework. The 2 most powerful features we saw were database abstraction and authentication.
- Database abstraction (ORM):
We start in config.settings.py and choose which database we want to use.
From there, django takes control and allows us to use any database without even needing to know SQL or NoSQL Syntax.
(Django natively only has SQL databases, but we installed djongo, a python package that allows us to choose MongoDB as 
our backend database, just as if it were one of Django's native database) .
How do we get away without typing any database command (neither in the shell nor the scripts)? Simple:
In models.py in our app, we define classes that extend django/djongo.models for each database model. We can think of it
as each class represents a table/collection. Therefore, each instance of that class represents a row/document.
But these are still python classes, so just like that, by using our well-loved python syntax to retrieve and manipulate these
objects, the changes we make are actually reflected in our database. We are now able to work with that database using python.
Each model comes with a manager (default name is objects), and that manager provides us with all the methods we need to query 
data. For example OurDatabaseModel.objects.all() returns a list of all rows/documents in OurDatabaseModel table/collection. 
So we just need to look at the documentation to find the method we need for querying. To create or modify the object, 
we directly modify it by assigning value to the field we want, just like we do when working with a python dict. 
Let's just not forget to call the save() method to apply our changes in the database.
- authentication:
Django takes care of authentication for us and stores these information in our backend database. Cool!

Now we have our database running, but unlike us, our web-client (in this case react) is not fond of python like we are.
It does not want to get python objects when trying to get information from the database. What it likes it JSON.
No worries, we can make our django backend serve rest api http response. This is where django-rest-framework (rest_framework)
comes in. rest_framework allows us to create Serializer classes that extend its serializer class. When we pass our models to
the serializer that we created, it will convert our python models to nice JSON. Problem solved. With other convenient tools
provided by rest_framework like Response, we now have our REST api and can send the JSON response to our web-client. We set up
all these responses as decorated methods in the views file in our app folder.

When a request comes in, django will look in urls.py in its config file. Because of the path('', include(app.urls))
we put in there, it will be redirected to the urls.py in our app folder, where it will be wired up to call the appropriate
method in views.py based on its url. The called method will execute the logic (querying or updating database, calculate 
number of possible words for given letter set, etc) and will return the response needed.